---

- name: Setup benchmark node 
  hosts: 'all'
  roles:
    - role: evandam.conda
  tasks:
    - name: root install
      become: true 
      become_exe: "sudo su -"
      become_method: su
      block:
      - name: Update and upgrade apt
        register: updatesys
        apt:
          name: "*"
          state: latest
          update_cache: yes

      - name: Install apt
        apt:
          name:
            - unzip
            - bzip2
            - libdbus-glib-1-2
            - libegl1-mesa
            - gcc
            - g++
            - python3-pip
            - build-essential
            - libssl-dev
            - libffi-dev
            - python-dev
            - git
            - screen

      - name: Install docker
        block:
        - name: Install apt
          apt:
            name:
            - ca-certificates
            - curl
            - gnupg
            - lsb-release
        - name: Add docker gpg key
          block:
            shell: mkdir -m 0755 -p /etc/apt/keyrings
            shell: curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        - name: Add docker repo
          shell: echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
                $(lsb_release -cs) stable" \| sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        - name: Install docker
          block:
          - name: Update and upgrade apt
            register: updatesys
            apt:
              name: "*"
              state: latest
              update_cache: yes
          - name: Install apt
            apt:
              name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin

    - name: Init .vimrc
      become: true
      become_user: bankde
      copy:
        content: "set smartindent\nset tabstop=2\nset expandtab\nset shiftwidth=2"
        dest: /home/bankde/.vimrc

    - name: Check conda exist
      stat:
        path: /home/bankde/.conda/bin/conda
      register: conda

    - name: Install Conda
      become: true
      become_user: bankde
      block:
        - name: Download
          get_url: 
            url: https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh
            dest: /tmp/conda.sh
            mode: '775'
        - name: Run the installer
          shell: bash /tmp/conda.sh -b -p /home/bankde/.conda
        - name: Add conda bin to path
          shell: echo 'export PATH=/home/bankde/.conda/bin:$PATH' >> /home/bankde/.bashrc
        - name: Init
          shell: /home/bankde/.conda/bin/conda init --all
      when: not conda.stat.exists

    - name: Install pyopenssl
      pip:
        name:
          - pyopenssl

    - name: Update conda and pip
      become: true
      become_user: bankde
      block:
        - name: Update conda
          conda:
            name: conda
            state: latest
            executable: /home/bankde/.conda/bin/conda
        - name: Check conda env exist
          stat:
            path: /home/bankde/.conda/envs/Volpy
          register: Volpy 
        - name: Create conda env
          conda:
            name: python
            version: '3.10'
            environment: Volpy 
            state: present
            executable: /home/bankde/.conda/bin/conda
          when: not Volpy.stat.exists
        - name: Conda pip install
          pip:
            executable: /home/bankde/.conda/envs/Volpy/bin/pip
            name:
              - ray==1.13.0
              - requests
              - scipy==1.8.1
              - selenium
              - matplotlib
              - jupyter
              - cloudpickle==2.1.0
              - dill==0.3.5.1
              - aiohttp
              - python-socketio
              - pyopenssl
              - pandas
              - ipython
              - grpcio
              - autobahn
              - bidict

    - name: Check opt/bin directory
      stat:
        path: /opt/bin
      register: optbin

    - name: Create opt/bin directory
      become: true
      become_exe: "sudo su -"
      become_method: su
      file:
        path: /opt/bin
        state: directory
        mode: '777' # Test server

    - name: Add optbin to profile
      become: true
      become_user: bankde
      shell: echo 'export PATH=/opt/bin:/opt/bin/firefox:$PATH' >> /home/bankde/.bashrc
      when: not optbin.stat.exists

    - name: Install chrome and firefox
      become: true
      become_exe: "sudo su -"
      become_method: su
      block:
        - get_url: url="https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_103.0.5060.53-1_amd64.deb" dest="/tmp/chrome.deb"
        - get_url: url="https://chromedriver.storage.googleapis.com/103.0.5060.53/chromedriver_linux64.zip" dest="/tmp/chromedriver.zip"
        - shell: apt install -y --allow-downgrades /tmp/chrome.deb
        - shell: unzip -o /tmp/chromedriver.zip -d /opt/bin/
        - get_url: url="https://ftp.mozilla.org/pub/firefox/releases/102.0esr/linux-x86_64/en-US/firefox-102.0esr.tar.bz2" dest="/tmp/firefox.tar.bz2"
        - get_url: url="https://github.com/mozilla/geckodriver/releases/download/v0.31.0/geckodriver-v0.31.0-linux64.tar.gz" dest="/tmp/geckodriver.tar.gz"
        - shell: tar xvf /tmp/firefox.tar.bz2 -C /opt/bin/
        - shell: tar xvf /tmp/geckodriver.tar.gz -C /opt/bin/

    - name: Setup jupyter
      block:
        - name: Setup config
          shell: /home/bankde/.conda/bin/jupyter notebook --generate-config -y
          args:
            chdir: /home/bankde
        - name: Edit config 
          replace:
            path: /home/bankde/.jupyter/jupyter_notebook_config.py
            regexp: "# c.NotebookApp.ip = 'localhost'"
            replace: "c.NotebookApp.ip = '{{ ansible_default_ipv4.address }}'" 
        - name: Create key for jupyter 
          block:
            - openssl_privatekey:
                path: /home/bankde/mykey.key 
                size: 2048
            - openssl_csr:
                path: /home/bankde/mycsr.csr 
                privatekey_path: /home/bankde/mykey.key 
            - openssl_certificate:
                provider: selfsigned
                path: /home/bankde/mycert.pem
                privatekey_path: /home/bankde/mykey.key 
                csr_path: /home/bankde/mycsr.csr 
      become: true 
      become_user: bankde

    - name: Clone work
      block:
        - name: Copy Volpy
          copy:
            src: Volpy
            dest: /home/bankde/
            owner: bankde
            group: bankde
            mode: preserve
        - name: Copy codepickle
          copy:
            src: code_serialization
            dest: /home/bankde
            owner: bankde
            group: bankde
            mode: preserve

        #    - name: Run jupyter
        #      block:
        #        - name: jupyter background
        #          shell: jupyter notebook --certfile=mycert.pem --keyfile=mykey.key >/tmp/jupyter_token 2>&1
        #          args:
        #            chdir: /home/bankde
        #          async: 2592000
        #          poll: 0
        #        - name: jupyter starting
        #          pause:
        #            seconds: 5
        #        - name: jupyter token
        #          block:
        #            - name: read file
        #              command: "tail -5 /tmp/jupyter_token"
        #              register: jupyter_token
        #            - debug:
        #                var: jupyter_token.stdout_lines
        #      become: true 
        #      become_user: bankde

    - name: Install codepickle
      become: true
      become_user: bankde
      block:
        - name: tar codepickle
          community.general.archive:
            path: /home/bankde/code_serialization/codepickle
            dest: /home/bankde/code_serialization/codepickle.tar.gz
            format: gz
        - name: Pip install codepickle tar
          pip:
            executable: /home/bankde/.conda/envs/Volpy/bin/pip
            name:
              - file:///home/bankde/code_serialization/codepickle.tar.gz 

    - name: Create crossbar router docker image
      shell:
        cmd: docker build -t router -f Dockerfile .
        chddir: /home/bankde/Volpy/src/router/
